[{"path":"https://lucy-dwr.github.io/pubclassify/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 California Department Water Resources Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/articles/classify_dwr_pubs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DWR Publication Classification using an LLM","text":"California Department Water Resources (DWR) developed method classifying peer-reviewed publications DWR contributed authorship /funded. classification performed large language model (LLM).","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/articles/classify_dwr_pubs.html","id":"dwr-publication-inventory","dir":"Articles","previous_headings":"","what":"DWR publication inventory","title":"DWR Publication Classification using an LLM","text":"DWR built inventory peer-reviewed publications 2020 present using three techniques: call Crossref API using general search query term “California Department Water Resources” publication date filter January 1, 2020 later call Crossref API using DWR’s unique funder identifier publication date filter January 1, 2020 later call Crossref API using list digital object identifiers (DOIs) California Energy Commission librarian produced calls produced inventory contains 581 unique peer-reviewed articles. first eight entries inventory: Trask, James C., Scott M. Devine, Graham E. Fogg. 2020. “Soil temperature survey mountain basin.” Geoderma 367: 114202 doi:10.1016/j.geoderma.2020.114202 Anderson, Michael. 2020. “Jim Goodridge Memorial.” Journal Applied Service Climatology 2020, . 2. doi:10.46275/joasc.2020.01.002 Wickham, Patrick et al. 2020. “UV light temperature induced fluridone degradation water sediment potential transport aquifer.” Environmental Pollution 265: 114750 doi:10.1016/j.envpol.2020.114750 Sommer, Ted et al. 2020. “Evaluation large-scale flow manipulation upper San Francisco Estuary: Response habitat conditions endangered native fish.” PLOS ONE 15, . 10: e0234673 doi:10.1371/journal.pone.0234673 Herbold, Bruce et al. 2020. “Honor Dr. Larry R. Brown.” San Francisco Estuary Watershed Science 19, . 2. doi:10.15447/sfews.2021v19iss2art1 Jeffres, Carson . et al. 2020. “Detrital food web contributes aquatic ecosystem productivity rapid salmon growth managed floodplain.” PLOS ONE 15, . 9: e0216019 doi:10.1371/journal.pone.0216019 Switanek, Matthew B. et al. 2020. “Present Past Sea Surface Temperatures: Recipe Better Seasonal Climate Forecasts.” Weather Forecasting 35, . 4: 1221-1234 doi:10.1175/waf-d-19-0241.1 Avanzi, Francesco et al. 2020. “Information content spatially distributed ground-based measurements hydrologic-parameter calibration mixed rain-snow mountain headwaters.” Journal Hydrology 582: 124478 doi:10.1016/j.jhydrol.2019.124478 peer-reviewed article inventory includes full abstract text, available. example, abstract associated Switanek et al. (2020) publication: Monthly tropical sea surface temperature (SST) data used predictors make statistical forecasts cold season (November–March) precipitation temperature contiguous United States. use combined-lead sea surface temperature (CLSST) model, predictive information discovered just recent SSTs also SSTs 18 months prior. find CLSST cold season forecast anomaly correlation skill higher North American Multimodel Ensemble (NMME) SEAS5 model European Centre Medium-Range Weather Forecasts (ECMWF) averaged United States precipitation 2-m air temperature. precipitation forecast skill obtained CLSST parts Intermountain West particular interest implications water resources. regions, CLSST dramatically improves skill dynamical model ensembles, can attributed robust statistical response precipitation region SST anomalies previous year tropical Pacific.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/articles/classify_dwr_pubs.html","id":"dwr-role","dir":"Articles","previous_headings":"DWR publication inventory","what":"DWR role","title":"DWR Publication Classification using an LLM","text":"DWR serves two roles publications listed inventory: authorship funding. Sometimes, DWR contributes single publication. DWR’s contributions come form funding.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/articles/classify_dwr_pubs.html","id":"division-author-contributions","dir":"Articles","previous_headings":"DWR publication inventory","what":"Division author contributions","title":"DWR Publication Classification using an LLM","text":"case DWR authorship, publications assigned DWR division based divisional affiliation highest-ranking author. add division information, author names fuzzy-matched roster employees, divisions, years since 2020. DWR authors spread across 13 divisions. division published greatest number manuscripts DISE","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/articles/classify_dwr_pubs.html","id":"large-language-model-classification","dir":"Articles","previous_headings":"","what":"Large language model classification","title":"DWR Publication Classification using an LLM","text":"publication classification performed using Google’s Gemini large language model. function classify_pubs_gemini() sends abstract model along system prompt instructs model perform classification. system prompt used classification: expert classifier works National Science Foundation (NSF). uploading file containing complete NSF fields--study taxonomy. Please load CSV memory use classify abstracts send. send abstract, reply JSON containing: doi, first_level, second_level, third_level (matching exactly taxonomy values). wrap output markdown code fences add extra text. National Science Foundation (NSF) classification system referenced system prompt used annual NSF Survey Earned Doctorates (SED). recent version SED taxonomy described . example elements taxonomy. abstract fed Google Gemini 2.0 Flash large language model (LLM), cost-efficient, non-thinking model knowledge cutoff June 2024. LLM produced three-level NSF classification article.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/articles/classify_dwr_pubs.html","id":"classification-visualizations","dir":"Articles","previous_headings":"Large language model classification","what":"Classification visualizations","title":"DWR Publication Classification using an LLM","text":"Since 2020, DWR published papers first-level classification geosciences, atmospheric, ocean sciences (171 papers), followed biological biomedical sciences (129 papers). handful papers published non-science engineering; education; mathematics statistics.  Drilling one level classification, can see many papers published address ecology, evolutionary biology, epidemiology (96 papers), ocean, marine, atmospheric science (96 papers), geological earth sciences (75 papers).  Total DWR publications rose 99 2020 peak 136 2022. two leading fields—geosciences, atmospheric, ocean sciences biological biomedical sciences—variable counts publications per year, reflecting ebbs flows scientific work, likely due impacts COVID-19 analysis window. Smaller topics social sciences, mathematics statistics, 4 papers year, remain relatively flat period.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lucy Andrews. Author, maintainer.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Andrews L (2025). pubclassify: Classify Scientific Publications LLMs. R package version 0.1.0.9001, https://lucy-dwr.github.io/pubclassify.","code":"@Manual{,   title = {pubclassify: Classify Scientific Publications with LLMs},   author = {Lucy Andrews},   year = {2025},   note = {R package version 0.1.0.9001},   url = {https://lucy-dwr.github.io/pubclassify}, }"},{"path":[]},{"path":"https://lucy-dwr.github.io/pubclassify/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"pubclassify: Retrieve and Classify Publications with Large Language Models","text":"pubclassify R package retrieving, processing, classifying academic publications using large language models (LLMs). package provides tools inspiration : Retrieving publication metadata CrossRef using various query methods Cleaning standardizing DOIs, abstracts, publication metadata Formatting citations multiple academic styles (APA, Chicago, Nature, Science, AGU) Classifying publications using Google’s Gemini LLM Analyzing classification results visualization-friendly data structures","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"pubclassify: Retrieve and Classify Publications with Large Language Models","text":"can install development version pubclassify GitHub :","code":"# install devtools first if needed: # install.packages(\"devtools\") devtools::install_github(\"lucy-dwr/pubclassify\")"},{"path":"https://lucy-dwr.github.io/pubclassify/index.html","id":"main-workflow","dir":"","previous_headings":"","what":"Main Workflow","title":"pubclassify: Retrieve and Classify Publications with Large Language Models","text":"typical workflow pubclassify involves four main steps:","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/index.html","id":"id_1-retrieve-publications","dir":"","previous_headings":"Main Workflow","what":"1. Retrieve publications","title":"pubclassify: Retrieve and Classify Publications with Large Language Models","text":"","code":"library(pubclassify)  # option A: by funder ID funder_info <- get_funder_info(\"US National Institutes of Health\") nih_pubs <- get_funded(funder_info$id[1], total = 100)  # option B: by DOIs my_dois <- c(   \"10.1038/s41586-019-1401-2\",   \"10.1126/science.aaf7671\",   \"10.1088/1748-9326/9/8/084012\" ) my_pubs <- get_pubs(dois = my_dois)  # option C: by keyword search oroville_pubs <- get_pubs(   query = \"Oroville Dam\",   filter = c(from_pub_date = \"2020-01-01\"),   total = 30 )"},{"path":"https://lucy-dwr.github.io/pubclassify/index.html","id":"id_2-clean-and-process-the-data","dir":"","previous_headings":"Main Workflow","what":"2. Clean and process the data","title":"pubclassify: Retrieve and Classify Publications with Large Language Models","text":"","code":"nih_pubs_cleaned <- clean_crossref_result(nih_pubs) |>   dplyr::mutate(     # extract clean DOIs     doi = clean_doi(doi),          # extract author information     author_info = lapply(author, extract_author_info),     lead_author_first_name = sapply(author_info, \\(x) x$lead_author_first_name),     lead_author_last_name = sapply(author_info, \\(x) x$lead_author_last_name),     author_count = sapply(author_info, \\(x) x$author_count),          # extract publication year     pub_year = extract_year_vectorized(published_print, published_online, created)   ) |>   dplyr::select(-author_info) |>   dplyr::filter(!is.na(abstract_text))"},{"path":"https://lucy-dwr.github.io/pubclassify/index.html","id":"id_3-classify-publications-with-an-llm","dir":"","previous_headings":"Main Workflow","what":"3. Classify publications with an LLM","title":"pubclassify: Retrieve and Classify Publications with Large Language Models","text":"","code":"classified_nih_pubs <- classify_pubs_gemini(nih_pubs_cleaned)"},{"path":"https://lucy-dwr.github.io/pubclassify/index.html","id":"id_4-analyze-results","dir":"","previous_headings":"Main Workflow","what":"4. Analyze results","title":"pubclassify: Retrieve and Classify Publications with Large Language Models","text":"","code":"# combine with original data nih_results <- dplyr::left_join(nih_pubs_cleaned, classified_nih_pubs, by = \"doi\")  # summarize classifications nih_summary <- nih_results |>   dplyr::filter(!is.na(first_level)) |>   dplyr::count(first_level, second_level, sort = TRUE)  # format top publications as citations top_nih_pubs <- nih_results |>    dplyr::filter(!is.na(first_level)) |>   dplyr::slice_head(n = 3)  nih_citations <- sapply(1:nrow(top_nih_pubs), function(i) {   format_citation(top_nih_pubs[i, ], style = \"chicago\", link_doi = TRUE) })  # display results print(head(nih_summary, 8)) cat(\"\\nTop publications:\\n\\n\") cat(paste(seq_along(nih_citations), nih_citations, sep = \". \", collapse = \"\\n\\n\"))"},{"path":[]},{"path":"https://lucy-dwr.github.io/pubclassify/index.html","id":"retrieval-functions","dir":"","previous_headings":"Function reference","what":"Retrieval functions","title":"pubclassify: Retrieve and Classify Publications with Large Language Models","text":"","code":"# search for a funder by name funder_info <- get_funder_info(\"California Department of Water Resources\")  # get publications by funder ID funded_pubs <- get_funded(\"100000001\", filter = c(type = \"journal-article\"))  # get publications by DOIs, keyword, or filters pubs_by_doi <- get_pubs(dois = c(\"10.1038/nature12345\")) pubs_by_query <- get_pubs(query = \"machine learning\") pubs_by_filter <- get_pubs(filter = c(from_pub_date = \"2023-01-01\"))"},{"path":"https://lucy-dwr.github.io/pubclassify/index.html","id":"data-cleaning-functions","dir":"","previous_headings":"Function reference","what":"Data cleaning functions","title":"pubclassify: Retrieve and Classify Publications with Large Language Models","text":"","code":"# clean DOIs from various formats clean_dois <- clean_doi(c(\"https://doi.org/10.1234/example\", \"doi:10.5678/test\"))  # clean CrossRef API results cleaned_pubs <- clean_crossref_result(raw_pubs, pattern = \"climate\")  # extract publication years years <- extract_year_vectorized(published_print, published_online, created)  # extract author information author_data <- extract_author_info(publication$author[[1]])  # search across columns for a pattern search_results <- search_cols(publications, \"model\", ignore_case = TRUE)"},{"path":"https://lucy-dwr.github.io/pubclassify/index.html","id":"formatting-and-classification-functions","dir":"","previous_headings":"Function reference","what":"Formatting and classification functions","title":"pubclassify: Retrieve and Classify Publications with Large Language Models","text":"","code":"# format citation in different styles apa_citation <- format_citation(publication, style = \"apa\") chicago_citation <- format_citation(publication, style = \"chicago\") nature_citation <- format_citation(publication, style = \"nature\") science_citation <- format_citation(publication, style = \"science\") agu_citation <- format_citation(publication, style = \"agu\")  # classify publications with LLM classified <- classify_pubs_gemini(publications, model = \"gemini-2.0-flash\")"},{"path":"https://lucy-dwr.github.io/pubclassify/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"pubclassify: Retrieve and Classify Publications with Large Language Models","text":"encounter issues, please file report reproducible example GitHub.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"pubclassify: Retrieve and Classify Publications with Large Language Models","text":"package licensed MIT License.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/classify_pubs_gemini.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify publications using Google's Gemini LLM with an external NSF taxonomy — classify_pubs_gemini","title":"Classify publications using Google's Gemini LLM with an external NSF taxonomy — classify_pubs_gemini","text":"Uses Google's Gemini LLM classify academic publications according National Science Foundation (NSF) fields--study classification system. function accepts dataframe publication abstracts taxonomy dataframe, uploads taxonomy LLM, returns hierarchical classifications.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/classify_pubs_gemini.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify publications using Google's Gemini LLM with an external NSF taxonomy — classify_pubs_gemini","text":"","code":"classify_pubs_gemini(pubs_df, taxonomy_df, model = \"gemini-2.0-flash\")"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/classify_pubs_gemini.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify publications using Google's Gemini LLM with an external NSF taxonomy — classify_pubs_gemini","text":"pubs_df dataframe containing publication information. Must include columns 'doi' 'abstract_text'. taxonomy_df dataframe containing NSF taxonomy. Must include columns 'first_level', 'second_level', 'third_level'. model Character string specifying Gemini model use. Default \"gemini-2.0-flash\".","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/classify_pubs_gemini.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify publications using Google's Gemini LLM with an external NSF taxonomy — classify_pubs_gemini","text":"tibble following columns: doi Digital Object Identifier publication first_level NSF first-level classification field second_level NSF second-level classification field third_level NSF third-level classification field raw_response List column containing complete raw JSON response","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/classify_pubs_gemini.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify publications using Google's Gemini LLM with an external NSF taxonomy — classify_pubs_gemini","text":"","code":"if (FALSE) { # \\dontrun{ classifications <- classify_pubs_gemini(   my_publications,   taxonomy_df = nsf_sed_taxonomy ) } # }"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_crossref_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean and filter Crossref API results — clean_crossref_result","title":"Clean and filter Crossref API results — clean_crossref_result","text":"Cleans filters data frames returned Crossref API queries. function standardizes column names, removes unwanted columns, filters results based search pattern, cleans JATS-formatted abstracts.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_crossref_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean and filter Crossref API results — clean_crossref_result","text":"","code":"clean_crossref_result(   df,   pattern = NULL,   drop_cols = NULL,   abstract_col = \"abstract\",   abstract_output_col = \"abstract_text\" )"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_crossref_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean and filter Crossref API results — clean_crossref_result","text":"df data frame containing Crossref API results. pattern Optional character string regular expression. provided, function filter data frame retain rows pattern appears content columns (excluding references). Default NULL (filtering). drop_cols Optional character vector column names remove data frame. Default NULL (columns removed). abstract_col Character string specifying name column containing abstracts. Default \"abstract\". abstract_output_col Character string specifying name column cleaned abstracts stored. Default \"abstract_text\".","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_crossref_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean and filter Crossref API results — clean_crossref_result","text":"tibble cleaned column names, filtered rows (pattern provided), cleaned abstracts.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_crossref_result.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean and filter Crossref API results — clean_crossref_result","text":"function performs several cleaning operations: Standardizes column names using janitor::clean_names() Removes specified columns drop_cols provided pattern provided, filters rows containing pattern content fields (excluding references) Cleans JATS-formatted abstracts using clean_jats_abstracts() function function depends two helper functions: search_cols(): Searches columns pattern adds matching_cols column clean_jats_abstracts(): Extracts cleans text JATS-formatted XML abstracts","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_crossref_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean and filter Crossref API results — clean_crossref_result","text":"","code":"if (FALSE) { # \\dontrun{ # get publications from Crossref crossref_results <- rcrossref::cr_works(query = \"machine learning\", limit = 20)  # clean the results cleaned_crossref_results <- clean_crossref_result(   df = crossref_results$data,   pattern = \"neural network\",   drop_cols = c(\"reference\", \"container_title_short\"),   abstract_col = \"abstract\" ) } # }"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_doi.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean and standardize DOIs — clean_doi","title":"Clean and standardize DOIs — clean_doi","text":"Processes Digital Object Identifier (DOI) strings extract standardize DOI value removing various prefixes, URL components, extraneous characters. function helps normalize DOIs may presented different formats (URLs, citations, etc.) consistent standard form.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_doi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean and standardize DOIs — clean_doi","text":"","code":"clean_doi(doi, warn = FALSE)"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_doi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean and standardize DOIs — clean_doi","text":"doi character vector containing DOI strings cleaned, NULL/NA values. warn Logical. TRUE, generate warnings NULL -NA inputs. Default FALSE.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_doi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean and standardize DOIs — clean_doi","text":"character vector length input, cleaned DOI values. Empty strings converted NA. input NULL NA, returned unchanged.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_doi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean and standardize DOIs — clean_doi","text":"function performs following cleaning operations: Removes leading trailing whitespace Removes quotation marks beginning end Removes URL prefixes like \"http://doi.org/\", \"https://dx.doi.org/\", etc. Removes \"doi:\" prefix (case insensitive) Handles special cases like missing slashes \".org\" Removes publisher-specific URL formats (e.g., \"https://ascelibrary.org/doi/abs/\") Converts empty strings NA input character vector, returned unchanged.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_doi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean and standardize DOIs — clean_doi","text":"","code":"# do a basic DOI cleaning clean_doi(\"10.1234/example.doi.123\") #> [1] \"10.1234/example.doi.123\"  # clean DOIs with URL prefixes clean_doi(c(\"https://doi.org/10.1234/example\", \"doi:10.5678/another.example\")) #> [1] \"10.1234/example\"         \"10.5678/another.example\"  # handle invalid inputs clean_doi(\"\")   # returns NA #> [1] NA clean_doi(NA)   # returns NA #> [1] NA clean_doi(NULL) # returns NULL #> NULL  # enable warnings clean_doi(NULL, warn = TRUE) # returns NULL with warning #> Warning: NULL input provided to clean_doi() #> NULL"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_jats_abstracts.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean JATS XML abstracts — clean_jats_abstracts","title":"Clean JATS XML abstracts — clean_jats_abstracts","text":"Processes JATS XML-formatted abstract fields publication data, converting plain text. function handles XML namespaces, extracts text content, standardizes whitespace produce clean, readable abstracts.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_jats_abstracts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean JATS XML abstracts — clean_jats_abstracts","text":"","code":"clean_jats_abstracts(   df,   abstract_col = \"abstract\",   abstract_output_col = \"abstract_text\" )"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_jats_abstracts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean JATS XML abstracts — clean_jats_abstracts","text":"df data frame containing abstract information JATS XML format. abstract_col Character string specifying name column containing JATS XML abstracts. Default \"abstract\". abstract_output_col Character string specifying name column cleaned abstracts stored. Default \"abstract_text\".","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_jats_abstracts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean JATS XML abstracts — clean_jats_abstracts","text":"input data frame added modified column containing cleaned abstract text. original data frame preserved except addition/modification abstract_output_col.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_jats_abstracts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean JATS XML abstracts — clean_jats_abstracts","text":"function performs several cleaning operations JATS XML abstracts: Strips namespace prefixes XML tags Parses XML extracts text content Collapses multiple whitespace characters single space Removes leading trailing whitespace Removes leading \"Abstract:\" \"abstract:\" text Empty NA abstracts preserved NA output.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_jats_abstracts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean JATS XML abstracts — clean_jats_abstracts","text":"","code":"if (FALSE) { # \\dontrun{ # create example data frame with JATS XML abstracts publications <- data.frame(   doi = c(\"10.1234/example.1\", \"10.1234/example.2\"),   abstract = c(     \"<jats:p>This is a sample abstract with <jats:italic>formatting<\/jats:italic>.<\/jats:p>\",     \"<jats:abstract><jats:p>Another example abstract.<\/jats:p><\/jats:abstract>\"   ) )  # clean the abstracts publications_clean <- clean_jats_abstracts(publications)  # use custom column names publications_clean <- clean_jats_abstracts(   publications,   abstract_col = \"abstract\",   abstract_output_col = \"clean_abstract\" ) } # }"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean and escape text for BibTeX entries — clean_text","title":"Clean and escape text for BibTeX entries — clean_text","text":"Prepares text strings use BibTeX entries escaping special characters special meaning LaTeX. helps prevent syntax errors BibTeX file processed LaTeX.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean and escape text for BibTeX entries — clean_text","text":"","code":"clean_text(text)"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean and escape text for BibTeX entries — clean_text","text":"text character string cleaned escaped BibTeX.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean and escape text for BibTeX entries — clean_text","text":"character string special characters escaped BibTeX. input NA, returns empty string.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean and escape text for BibTeX entries — clean_text","text":"function escapes following special characters: Ampersand (&) \\\\& Percent sign (%) \\\\% Underscore () \\\\ characters special meanings LaTeX must escaped displayed correctly final document. function used internally BibTeX generation functions ensure valid output.","code":""},{"path":[]},{"path":"https://lucy-dwr.github.io/pubclassify/reference/clean_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean and escape text for BibTeX entries — clean_text","text":"","code":"# escape special characters clean_text(\"Machine Learning & Statistics\") #> [1] \"Machine Learning \\\\& Statistics\" # returns \"Machine Learning \\&amp; Statistics\"  # handle multiple special characters clean_text(\"50% Reduction in Error_Rate\") #> [1] \"50\\\\% Reduction in Error\\\\_Rate\" # returns \"50\\% Reduction in Error\\_Rate\"  # handle NA values clean_text(NA) #> [1] \"\" # returns \"\""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/create_bibtex.html","id":null,"dir":"Reference","previous_headings":"","what":"Create BibTeX entry from publication data — create_bibtex","title":"Create BibTeX entry from publication data — create_bibtex","text":"Generates structured BibTeX entry row publication data, typically obtained CrossRef similar source. function validates required fields, creates appropriate BibTeX entry types based publication type, returns structured list fields formatted BibTeX string.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/create_bibtex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create BibTeX entry from publication data — create_bibtex","text":"","code":"create_bibtex(pub_row, key_prefix = \"\")"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/create_bibtex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create BibTeX entry from publication data — create_bibtex","text":"pub_row data frame row list containing publication metadata. Must include: doi, title, container_title, pub_year, author. May optionally include: volume, issue, page, publisher, url, fields. key_prefix Optional character string prepend citation key. Default empty string.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/create_bibtex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create BibTeX entry from publication data — create_bibtex","text":"list containing BibTeX fields raw BibTeX string, NA required fields missing. list includes: entry_type: BibTeX entry type (article, book, incollection, etc.) key: citation key author: Formatted author string title: publication title year: Publication year doi: Digital Object Identifier url: URL publication Additional fields based publication type (journal, volume, pages, etc.) raw_bibtex: complete formatted BibTeX entry string","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/create_bibtex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create BibTeX entry from publication data — create_bibtex","text":"function maps CrossRef publication types appropriate BibTeX entry types: \"journal-article\" \"article\" \"book-chapter\" \"incollection\" \"book\" \"book\" \"proceedings-article\" \"inproceedings\" others default \"article\" citation key generated using format: [key_prefix][last_name][year]. function expects author information pub_row$author list, first element containing author data. function depends helper functions: format_bibtex_authors(): Formats author data BibTeX-compatible string clean_text(): Cleans escapes text use BibTeX entries","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/create_bibtex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create BibTeX entry from publication data — create_bibtex","text":"","code":"if (FALSE) { # \\dontrun{ # create an input publication row pub_data <- data.frame(   doi = \"10.1234/journal.example\",   title = \"Example Research Paper\",   container_title = \"Journal of Examples\",   pub_year = 2023,   lead_author_last_name = \"Smith\",   author = I(list(list(     family = \"Smith\",     given = \"John\"   ))),   volume = \"45\",   issue = \"2\",   page = \"123-145\",   type = \"journal-article\",   url = \"https://doi.org/10.1234/journal.example\" )  # generate BibTeX with a prefix bibtex_entry <- create_bibtex(pub_data, key_prefix = \"ref:\")  # access specific fields bibtex_entry$key        # citation key bibtex_entry$raw_bibtex # complete BibTeX string } # }"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/extract_author_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract author information from publication metadata — extract_author_info","title":"Extract author information from publication metadata — extract_author_info","text":"Extracts key information lead author publication metadata. Identifies first author's given (first) family (last) names counts total number authors. Handles individual authors organizational authors special logic.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/extract_author_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract author information from publication metadata — extract_author_info","text":"","code":"extract_author_info(author_list)"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/extract_author_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract author information from publication metadata — extract_author_info","text":"author_list data frame containing author information. Expected following columns: sequence: character indicating author order, \"first\" identifying lead author given: given/first name individual authors family: family/last name individual authors name: (optional) full name organizational authors","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/extract_author_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract author information from publication metadata — extract_author_info","text":"list containing three elements: lead_author_first_name: character, first name lead author (NA found) lead_author_last_name: character, last name lead author (NA found) author_count: integer, total number authors","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/extract_author_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract author information from publication metadata — extract_author_info","text":"function processes author information typically obtained publication metadata sources CrossRef. handles several special cases: first author organization, searches first individual author list extract personal name information authors found author_list NULL, returns NA values names 0 author count specifically looks \"sequence\" field value \"first\" identify lead author function particularly useful creating citation keys, identifying first authors sorting, gathering bibliographic metadata.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/extract_author_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract author information from publication metadata — extract_author_info","text":"","code":"# try an example with individual authors authors <- data.frame(   sequence = c(\"first\", \"additional\", \"additional\"),   given = c(\"John\", \"Jane\", \"Robert\"),   family = c(\"Smith\", \"Johnson\", \"Williams\"),   stringsAsFactors = FALSE ) extract_author_info(authors) #> $lead_author_first_name #> [1] \"John\" #>  #> $lead_author_last_name #> [1] \"Smith\" #>  #> $author_count #> [1] 3 #>  # returns list(lead_author_first_name = \"John\", lead_author_last_name = \"Smith\", author_count = 3)  # try an example with an organization as first author mixed_authors <- data.frame(   sequence = c(\"first\", \"additional\"),   given = c(NA, \"Maria\"),   family = c(NA, \"Garcia\"),   name = c(\"National Science Foundation\", NA),   stringsAsFactors = FALSE ) extract_author_info(mixed_authors) #> $lead_author_first_name #> [1] \"Maria\" #>  #> $lead_author_last_name #> [1] \"Garcia\" #>  #> $author_count #> [1] 2 #>  # returns list(lead_author_first_name = \"Maria\", lead_author_last_name = \"Garcia\", author_count = 2)"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/extract_year_vectorized.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract publication year from various date fields — extract_year_vectorized","title":"Extract publication year from various date fields — extract_year_vectorized","text":"Extracts publication year multiple possible date fields using vectorized approach. function prioritizes dates following order: print publication date, online publication date, creation date.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/extract_year_vectorized.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract publication year from various date fields — extract_year_vectorized","text":"","code":"extract_year_vectorized(published_print, published_online, created)"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/extract_year_vectorized.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract publication year from various date fields — extract_year_vectorized","text":"published_print Character vector print publication dates (format: \"YYYY-MM-DD\" similar) published_online Character vector online publication dates (format: \"YYYY-MM-DD\" similar) created Character vector content creation dates (format: \"YYYY-MM-DD\" similar)","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/extract_year_vectorized.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract publication year from various date fields — extract_year_vectorized","text":"character vector containing extracted years. element, returns year first available date field according priority order. valid date found, returns NA_integer_.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/extract_year_vectorized.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract publication year from various date fields — extract_year_vectorized","text":"function applies following logic element input vectors: Extract first 4 characters (year) date field Use year published_print available Otherwise, use year published_online available Otherwise, use year created available none available, return NA_integer_ function designed work publication metadata sources like CrossRef, different types dates may available different publications.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/extract_year_vectorized.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract publication year from various date fields — extract_year_vectorized","text":"","code":"# extract year from different date combinations extract_year_vectorized(   published_print = c(\"2022-01-15\", NA, NA, \"2023-06-30\"),   published_online = c(NA, \"2021-12-10\", NA, \"2023-05-15\"),   created = c(NA, NA, \"2020-07-22\", \"2023-01-01\") ) #> [1] \"2022\" \"2021\" \"2020\" \"2023\" # returns c(\"2022\", \"2021\", \"2020\", \"2023\")  # handle missing values extract_year_vectorized(   published_print = c(NA, NA),   published_online = c(NA, \"2021-12-10\"),   created = c(NA, NA) ) #> [1] NA     \"2021\" # returns c(NA_integer_, \"2021\")"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_agu.html","id":null,"dir":"Reference","previous_headings":"","what":"Format citation in AGU style — format_agu","title":"Format citation in AGU style — format_agu","text":"Creates citation formatted according American Geophysical Union (AGU) style guidelines BibTeX data.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_agu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format citation in AGU style — format_agu","text":"","code":"format_agu(bibtex_data, link_doi = TRUE)"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_agu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format citation in AGU style — format_agu","text":"bibtex_data list containing BibTeX fields publication. link_doi Logical indicating whether DOIs formatted hyperlinks. Default TRUE.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_agu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format citation in AGU style — format_agu","text":"character string containing AGU-formatted citation, NA formatting fails.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_agu.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format citation in AGU style — format_agu","text":"AGU style formatting includes: Authors: initials followed last name (e.g., \"J. M. Smith\") 1-10 authors: authors listed 11+ authors: first author et al. Year parentheses authors Title without quotation marks Journal name italics Format: Author(s) (Year), Title, Journal, Volume(Issue), Pages, DOI","code":""},{"path":[]},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_agu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format citation in AGU style — format_agu","text":"","code":"# create BibTeX data bibtex_data <- list(   entry_type = \"article\",   author = \"Smith, John M. and Johnson, Sarah P.\",   year = \"2023\",   title = \"Example research paper\",   journal = \"Journal of Geophysical Research\",   volume = \"128\",   number = \"4\",   pages = \"123-145\",   doi = \"10.1029/example\" )  format_agu(bibtex_data) #> [1] \"J. M. Smith and S. P. Johnson (2023), Example research paper, *Journal of Geophysical Research*, 128(4), 123-145, [https://doi.org/10.1029/example](https://doi.org/10.1029/example)\""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_agu_authors.html","id":null,"dir":"Reference","previous_headings":"","what":"Format author string in AGU style — format_agu_authors","title":"Format author string in AGU style — format_agu_authors","text":"Formats author names according American Geophysical Union (AGU) style guidelines.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_agu_authors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format author string in AGU style — format_agu_authors","text":"","code":"format_agu_authors(author_str)"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_agu_authors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format author string in AGU style — format_agu_authors","text":"author_str character string containing author names \"Last, First\" format, separated \" \".","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_agu_authors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format author string in AGU style — format_agu_authors","text":"character string containing authors formatted AGU style.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_agu_authors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format author string in AGU style — format_agu_authors","text":"AGU author formatting rules: Authors formatted \"F. M. Last\" (initials followed last name) Single author: just formatted name Two authors: names joined \"\" 3-10 authors: names separated commas \"\" last author 11+ authors: first author followed \"et al.\"","code":""},{"path":[]},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_agu_authors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format author string in AGU style — format_agu_authors","text":"","code":"if (FALSE) { # \\dontrun{ format_agu_authors(\"Smith, John M.\") format_agu_authors(\"Smith, John M. and Johnson, Sarah P.\") format_agu_authors(\"Smith, John and Johnson, Sarah and Lee, David and Brown, Robert\") } # }"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_apa.html","id":null,"dir":"Reference","previous_headings":"","what":"Format citation in APA style — format_apa","title":"Format citation in APA style — format_apa","text":"Creates citation formatted according American Psychological Association (APA) style guidelines BibTeX data.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_apa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format citation in APA style — format_apa","text":"","code":"format_apa(bibtex_data, link_doi = TRUE)"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_apa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format citation in APA style — format_apa","text":"bibtex_data list containing BibTeX fields publication. link_doi Logical indicating whether DOIs formatted hyperlinks. Default TRUE.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_apa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format citation in APA style — format_apa","text":"character string containing APA-formatted citation, NA formatting fails.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_apa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format citation in APA style — format_apa","text":"APA style formatting includes: Authors: last name, initials format \"&\" final author 1-7 authors: authors listed 8+ authors: first 6 authors, ellipsis, last author Year parentheses authors Title sentence case without quotes Journal name volume italics Issue parentheses (italicized)","code":""},{"path":[]},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_apa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format citation in APA style — format_apa","text":"","code":"# create BibTeX data bibtex_data <- list(   entry_type = \"article\",   author = \"Smith, J. and Johnson, S.\",   year = \"2023\",   title = \"Example research paper\",   journal = \"Journal of Examples\",   volume = \"45\",   number = \"2\",   pages = \"123-145\",   doi = \"10.1234/example\" )  format_apa(bibtex_data) #> [1] \"Smith, J. & Johnson, S. (2023). Example research paper. *Journal of Examples*, *45*(2), 123-145. [doi:10.1234/example](https://doi.org/10.1234/example)\""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_apa_authors.html","id":null,"dir":"Reference","previous_headings":"","what":"Format author string in APA style — format_apa_authors","title":"Format author string in APA style — format_apa_authors","text":"Formats author names according American Psychological Association (APA) style guidelines.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_apa_authors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format author string in APA style — format_apa_authors","text":"","code":"format_apa_authors(author_str)"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_apa_authors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format author string in APA style — format_apa_authors","text":"author_str character string containing author names \"Last, First\" format, separated \" \".","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_apa_authors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format author string in APA style — format_apa_authors","text":"character string containing authors formatted APA style.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_apa_authors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format author string in APA style — format_apa_authors","text":"APA author formatting rules: Single author: unchanged Two authors: \"Last, F. M. & Last, F. M.\" 3-7 authors: \"Last, F. M., Last, F. M., ... & Last, F. M.\" 8+ authors: First 6 authors, ellipsis, last author","code":""},{"path":[]},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_apa_authors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format author string in APA style — format_apa_authors","text":"","code":"if (FALSE) { # \\dontrun{ format_apa_authors(\"Smith, John and Johnson, Sarah\") format_apa_authors(\"Smith, John and Johnson, Sarah and Lee, David\") } # }"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_bibtex_authors.html","id":null,"dir":"Reference","previous_headings":"","what":"Format author information for BibTeX entries — format_bibtex_authors","title":"Format author information for BibTeX entries — format_bibtex_authors","text":"Converts data frame author information properly formatted author string BibTeX entries. Handles individual authors, organizations, partial author information according BibTeX conventions.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_bibtex_authors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format author information for BibTeX entries — format_bibtex_authors","text":"","code":"format_bibtex_authors(author_list)"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_bibtex_authors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format author information for BibTeX entries — format_bibtex_authors","text":"author_list data frame containing author information. Expected columns : family: Family/last name individual authors given: Given/first name individual authors name: Full name organizational authors","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_bibtex_authors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format author information for BibTeX entries — format_bibtex_authors","text":"character string containing formatted author list BibTeX entry. Authors separated \" \" per BibTeX standards. valid authors found, returns \"Unknown\".","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_bibtex_authors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format author information for BibTeX entries — format_bibtex_authors","text":"function processes different types author entities: Individual authors: formatted \"Family, Given\" Organizations: enclosed braces like \"{Organization Name}\" Partial information: sses available name parts, \"Unknown\" missing family names Special handling: first author organization individual authors follow, organization dropped favor individual attributions Empty NULL author lists return \"Unknown\" function processes row author_list data frame sequentially","code":""},{"path":[]},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_bibtex_authors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format author information for BibTeX entries — format_bibtex_authors","text":"","code":"# handle individual authors authors <- data.frame(   family = c(\"Smith\", \"Johnson\", \"Lee\"),   given = c(\"John\", \"Sarah\", \"David\"),   name = c(NA, NA, NA),   stringsAsFactors = FALSE ) format_bibtex_authors(authors) #> [1] \"Smith, John and Johnson, Sarah and Lee, David\" # returns: Smith, John and Johnson, Sarah and Lee, David  # handle an organization as author org_author <- data.frame(   family = NA_character_,   given = NA_character_,   name = \"National Science Foundation\",   stringsAsFactors = FALSE ) # for organizations, the output will have the name wrapped in braces result <- format_bibtex_authors(org_author) # will return the organization name enclosed in braces  # handle mixed authors (organization will be dropped) mixed <- rbind(org_author, authors[1, ]) format_bibtex_authors(mixed) #> [1] \"Smith, John\" # returns: Smith, John"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_chicago.html","id":null,"dir":"Reference","previous_headings":"","what":"Format citation in Chicago style — format_chicago","title":"Format citation in Chicago style — format_chicago","text":"Creates citation formatted according Chicago Manual Style guidelines BibTeX data.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_chicago.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format citation in Chicago style — format_chicago","text":"","code":"format_chicago(bibtex_data, link_doi = TRUE)"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_chicago.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format citation in Chicago style — format_chicago","text":"bibtex_data list containing BibTeX fields publication. link_doi Logical indicating whether DOIs formatted hyperlinks. Default TRUE.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_chicago.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format citation in Chicago style — format_chicago","text":"character string containing Chicago-formatted citation, NA formatting fails.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_chicago.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format citation in Chicago style — format_chicago","text":"Chicago style formatting includes: Authors: first author \"Last, First\" format, subsequent authors \"First Last\" format 1-3 authors: authors listed 4+ authors: first author et al. Year authors Title quotation marks Journal name italics Format: Author(s). Year. \"Title.\" Journal Volume, . Issue: Pages.","code":""},{"path":[]},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_chicago.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format citation in Chicago style — format_chicago","text":"","code":"# create BibTeX data bibtex_data <- list(   entry_type = \"article\",   author = \"Smith, John and Johnson, Sarah\",   year = \"2023\",   title = \"Example research paper\",   journal = \"Journal of Examples\",   volume = \"45\",   number = \"2\",   pages = \"123-145\",   doi = \"10.1234/example\" )  format_chicago(bibtex_data) #> [1] \"Smith, John, and Sarah Johnson. 2023. \\\"Example research paper.\\\" *Journal of Examples* 45, no. 2: 123-145 [doi:10.1234/example](https://doi.org/10.1234/example)\""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_chicago_authors.html","id":null,"dir":"Reference","previous_headings":"","what":"Format author string in Chicago style — format_chicago_authors","title":"Format author string in Chicago style — format_chicago_authors","text":"Formats author names according Chicago Manual Style guidelines.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_chicago_authors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format author string in Chicago style — format_chicago_authors","text":"","code":"format_chicago_authors(author_str)"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_chicago_authors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format author string in Chicago style — format_chicago_authors","text":"author_str character string containing author names \"Last, First\" format, separated \" \".","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_chicago_authors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format author string in Chicago style — format_chicago_authors","text":"character string containing authors formatted Chicago style.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_chicago_authors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format author string in Chicago style — format_chicago_authors","text":"Chicago author formatting rules: Single author: \"Last, First\" 2-3 authors: first author \"Last, First\", subsequent authors \"First Last\" 4+ authors: first author et al.","code":""},{"path":[]},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_chicago_authors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format author string in Chicago style — format_chicago_authors","text":"","code":"if (FALSE) { # \\dontrun{ format_chicago_authors(\"Smith, John\") format_chicago_authors(\"Smith, John and Johnson, Sarah\") format_chicago_authors(\"Smith, John and Johnson, Sarah and Lee, David and Brown, Robert\") } # }"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_citation.html","id":null,"dir":"Reference","previous_headings":"","what":"Format citation in various academic styles — format_citation","title":"Format citation in various academic styles — format_citation","text":"Creates formatted citations various academic styles publication data. function serves central dispatcher supports multiple citation styles: APA, Nature, Chicago, Science, AGU formats.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_citation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format citation in various academic styles — format_citation","text":"","code":"format_citation(pub_data, style = \"apa\", link_doi = TRUE)"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_citation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format citation in various academic styles — format_citation","text":"pub_data Input publication data one three forms: BibTeX string parsed data frame row publication metadata list BibTeX fields already extracted style Character string specifying citation style. Options : \"apa\" - American Psychological Association (default) \"nature\" - Nature journal \"chicago\" - Chicago Manual Style \"science\" - Science journal \"agu\" - American Geophysical Union link_doi Logical indicating whether DOIs formatted hyperlinks. Default TRUE.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_citation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format citation in various academic styles — format_citation","text":"character string containing formatted citation, NA formatting fails.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_citation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format citation in various academic styles — format_citation","text":"function handles multiple input formats flexibility. dispatches citation formatting style-specific formatters. style follows conventional formatting rules publication style guide, including: Author formatting (number authors shown, use \"et al.\") Title formatting (quotes, italics) Order formatting journal, volume, issue, pages Year placement DOI formatting unsupported style requested, function defaults APA style warning.","code":""},{"path":[]},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_citation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format citation in various academic styles — format_citation","text":"","code":"# format a publication from a data frame pub_data <- data.frame(   author = I(list(data.frame(family = \"Smith\", given = \"John\"))),   title = \"Example Research Paper\",   journal = \"Journal of Examples\",   year = 2023,   volume = \"45\",   number = \"2\",   pages = \"123-145\",   doi = \"10.1234/example\",   stringsAsFactors = FALSE )  # format in different styles format_citation(pub_data, style = \"apa\") #> Warning: format_nature(): invalid bibtex data; returning NA. #> [1] NA format_citation(pub_data, style = \"nature\") #> Warning: format_nature(): invalid bibtex data; returning NA. #> [1] NA format_citation(pub_data, style = \"chicago\") #> Warning: format_nature(): invalid bibtex data; returning NA. #> [1] NA  # format without DOI hyperlinks format_citation(pub_data, style = \"apa\", link_doi = FALSE) #> Warning: format_nature(): invalid bibtex data; returning NA. #> [1] NA"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_nature.html","id":null,"dir":"Reference","previous_headings":"","what":"Format citation in Nature style — format_nature","title":"Format citation in Nature style — format_nature","text":"Creates citation formatted according Nature journal style guidelines BibTeX data.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_nature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format citation in Nature style — format_nature","text":"","code":"format_nature(bibtex_data, link_doi = TRUE)"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_nature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format citation in Nature style — format_nature","text":"bibtex_data list containing BibTeX fields publication. link_doi Logical indicating whether DOIs formatted hyperlinks. Default TRUE.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_nature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format citation in Nature style — format_nature","text":"character string containing Nature-formatted citation, NA ormatting fails.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_nature.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format citation in Nature style — format_nature","text":"Nature style formatting includes: Authors: last name, initials format \"&\" final author 1-5 authors: authors listed 6+ authors: first author et al. Title without quotation marks Journal name italics Volume bold Format: Authors. Title. Journal Volume, Pages (Year).","code":""},{"path":[]},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_nature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format citation in Nature style — format_nature","text":"","code":"# create BibTeX data bibtex_data <- list(   entry_type = \"article\",   author = \"Smith, J. and Johnson, S.\",   year = \"2023\",   title = \"Example research paper\",   journal = \"Nature\",   volume = \"612\",   pages = \"123-145\",   doi = \"10.1038/example\" )  format_nature(bibtex_data) #> [1] \"Smith, J. & Johnson, S. Example research paper. *Nature* **612**, 123-145 (2023). [doi:10.1038/example](https://doi.org/10.1038/example)\""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_nature_authors.html","id":null,"dir":"Reference","previous_headings":"","what":"Format author string in Nature style — format_nature_authors","title":"Format author string in Nature style — format_nature_authors","text":"Formats author names according Nature journal style guidelines.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_nature_authors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format author string in Nature style — format_nature_authors","text":"","code":"format_nature_authors(author_str)"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_nature_authors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format author string in Nature style — format_nature_authors","text":"author_str character string containing author names \"Last, First\" format, separated \" \".","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_nature_authors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format author string in Nature style — format_nature_authors","text":"character string containing authors formatted Nature style.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_nature_authors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format author string in Nature style — format_nature_authors","text":"Nature author formatting rules: Single author: \"Last, F.\" period 2-5 authors: \"Last, F., Last, F. & Last, F.\" 6+ authors: \"Last, F. et al.\"","code":""},{"path":[]},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_nature_authors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format author string in Nature style — format_nature_authors","text":"","code":"if (FALSE) { # \\dontrun{ format_nature_authors(\"Smith, John\") format_nature_authors(\"Smith, John and Johnson, Sarah and Lee, David\") } # }"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_science.html","id":null,"dir":"Reference","previous_headings":"","what":"Format citation in Science style — format_science","title":"Format citation in Science style — format_science","text":"Creates citation formatted according Science journal style guidelines BibTeX data.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_science.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format citation in Science style — format_science","text":"","code":"format_science(bibtex_data, link_doi = TRUE)"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_science.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format citation in Science style — format_science","text":"bibtex_data list containing BibTeX fields publication. link_doi Logical indicating whether DOIs formatted hyperlinks. Default TRUE.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_science.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format citation in Science style — format_science","text":"character string containing Science-formatted citation, NA formatting fails.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_science.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format citation in Science style — format_science","text":"Science style formatting includes: Authors: single author's last name first author's last name followed \"et al.\" Title without quotation marks Journal name italics Volume bold Format: Last_name et al., Title. Journal Volume, Pages (Year).","code":""},{"path":[]},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_science.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format citation in Science style — format_science","text":"","code":"# create BibTeX data bibtex_data <- list(   entry_type = \"article\",   author = \"Smith, John and Johnson, Sarah\",   year = \"2023\",   title = \"Example research paper\",   journal = \"Science\",   volume = \"380\",   pages = \"123-145\",   doi = \"10.1126/science.example\" )  format_science(bibtex_data) #> [1] \"Smith et al., Example research paper. *Science* **380**, 123-145 (2023). [doi:10.1126/science.example](https://doi.org/10.1126/science.example)\""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_science_authors.html","id":null,"dir":"Reference","previous_headings":"","what":"Format author string in Science style — format_science_authors","title":"Format author string in Science style — format_science_authors","text":"Formats author names according Science journal style guidelines.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_science_authors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format author string in Science style — format_science_authors","text":"","code":"format_science_authors(author_str)"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_science_authors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format author string in Science style — format_science_authors","text":"author_str character string containing author names \"Last, First\" format, separated \" \".","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_science_authors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format author string in Science style — format_science_authors","text":"character string containing authors formatted Science style.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_science_authors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format author string in Science style — format_science_authors","text":"Science author formatting rules: Single author: last name Multiple authors: first author's last name followed \"et al\"","code":""},{"path":[]},{"path":"https://lucy-dwr.github.io/pubclassify/reference/format_science_authors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format author string in Science style — format_science_authors","text":"","code":"if (FALSE) { # \\dontrun{ format_science_authors(\"Smith, John\") format_science_authors(\"Smith, John and Johnson, Sarah and Lee, David\") } # }"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/get_funded.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve publications funded by a specific funder — get_funded","title":"Retrieve publications funded by a specific funder — get_funded","text":"Fetches metadata publications funded specific organization, using CrossRef API. function handles pagination retrieve larger result sets enforces maximum number results prevent excessive API calls.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/get_funded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve publications funded by a specific funder — get_funded","text":"","code":"get_funded(   funder_id,   filter = c(type = \"journal-article\"),   total = 10000L,   per_page = 1000L )"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/get_funded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve publications funded by a specific funder — get_funded","text":"funder_id character string containing valid FundRef identifier. unique ID funding organization CrossRef Funder Registry. filter named character vector additional filters apply CrossRef query. Default c(type = \"journal-article\") retrieve journal articles. See cr_works available filter options. total integer specifying maximum number records retrieve. Default 10000. function stop many records fetched records available. per_page integer specifying many records fetch per API call. Must 1 1000. Default 1000 (maximum allowed CrossRef).","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/get_funded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve publications funded by a specific funder — get_funded","text":"data frame containing publication metadata works funded specified funder. structure follows CrossRef API output format processed rcrossref.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/get_funded.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve publications funded by a specific funder — get_funded","text":"function uses rcrossref package query CrossRef API works associated specific funder. handles pagination automatically, making multiple API calls needed retrieve requested number records. function stop fetching records conditions met: total number requested records fetched records available CrossRef page returns fewer records requested, indicating end available data FundRef IDs can found CrossRef Funder Registry via search function get_funder_info. common funders include: 100000001: National Science Foundation (NSF) 100000002: National Institutes Health (NIH) 100000104: National Aeronautics Space Administration (NASA) 100007782: California Natural Resources Agency (CNRA)","code":""},{"path":[]},{"path":"https://lucy-dwr.github.io/pubclassify/reference/get_funded.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve publications funded by a specific funder — get_funded","text":"","code":"if (FALSE) { # \\dontrun{ # get up to 500 NSF-funded journal articles nsf_pubs <- get_funded(\"100000001\", total = 500)  # get NIH-funded conference papers nih_conf <- get_funded(   funder_id = \"100000002\",   filter = c(type = \"proceedings-article\"),   total = 200 )  # get recent CNRA publications cnra_recent <- get_funded(   funder_id = \"100007782\",   filter = c(type = \"journal-article\", from_pub_date = \"2023-01-01\"),   total = 100 ) } # }"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/get_funder_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for funder information in the CrossRef Funder Registry — get_funder_info","title":"Search for funder information in the CrossRef Funder Registry — get_funder_info","text":"Searches CrossRef Funder Registry funding organizations matching query string. function useful finding FundRef IDs know name funding organization identifier.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/get_funder_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for funder information in the CrossRef Funder Registry — get_funder_info","text":"","code":"get_funder_info(query, limit = 20)"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/get_funder_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for funder information in the CrossRef Funder Registry — get_funder_info","text":"query character string containing search query. can full partial name funding organization (e.g., \"National Science Foundation\" \"NSF\"). limit integer specifying maximum number results return. Default 20.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/get_funder_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for funder information in the CrossRef Funder Registry — get_funder_info","text":"data frame containing information funding organizations matching query. Columns typically include: id: FundRef identifier (used get_funded) name: full name funding organization alt-names: alternative names abbreviations uri: URI funder Funder Registry location: geographic location organization","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/get_funder_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for funder information in the CrossRef Funder Registry — get_funder_info","text":"function uses rcrossref package query CrossRef Funder Registry API. search case-insensitive partial matches supported. Results typically sorted relevance query. FundRef IDs returned function can used get_funded retrieve publications funded specific organization.","code":""},{"path":[]},{"path":"https://lucy-dwr.github.io/pubclassify/reference/get_funder_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for funder information in the CrossRef Funder Registry — get_funder_info","text":"","code":"if (FALSE) { # \\dontrun{ # search for the National Science Foundation nsf_info <- get_funder_info(\"National Science Foundation\")  # Search with an abbreviation nih_info <- get_funder_info(\"NIH\")  # Search for funders in a specific country uk_funders <- get_funder_info(\"United Kingdom\")  # Get more results many_funders <- get_funder_info(\"climate change\", limit = 50)  # Use with get_funded to retrieve publications rlf_info <- get_funder_info(\"Resources Legacy Fund\") rlf_id <- rlf_info$id[1] rlf_pubs <- get_funded(rlf_id, total = 100) } # }"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/get_pubs.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve publication metadata from CrossRef — get_pubs","title":"Retrieve publication metadata from CrossRef — get_pubs","text":"Fetches publication metadata CrossRef API using either search query, filters, list Digital Object Identifiers (DOIs). function handles pagination search queries processes DOIs individually track successes failures.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/get_pubs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve publication metadata from CrossRef — get_pubs","text":"","code":"get_pubs(   query = NULL,   filter = NULL,   dois = NULL,   total = 10000L,   per_page = 1000L,   preserve_404 = TRUE )"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/get_pubs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve publication metadata from CrossRef — get_pubs","text":"query Character string containing search query. can used search across multiple fields. Default NULL. filter Named character vector filters apply CrossRef query. See cr_works available filter options. Default NULL. dois Character vector DOIs retrieve. provided, query filter parameters ignored. Default NULL. total Integer specifying maximum number records retrieve. Default 10000. function stop many records fetched records available. per_page Integer specifying many records fetch per API call using query filter mode. Must 1 1000. Default 1000 (maximum allowed CrossRef). preserve_404 Logical indicating whether include placeholder rows DOIs retrieved. TRUE (default), result contain one row input DOI, NA values found. FALSE, unfound DOIs omitted result.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/get_pubs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve publication metadata from CrossRef — get_pubs","text":"data frame containing publication metadata CrossRef. using DOI mode preserve_404 = TRUE, result include: standard CrossRef metadata fields original_doi: DOI provided input doi_retrieved: Logical indicating whether DOI successfully retrieved","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/get_pubs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve publication metadata from CrossRef — get_pubs","text":"function provides two modes operation: Search mode: query filter parameters provided, function performs search using CrossRef API handles pagination retrieve multiple pages results. DOI mode: list DOIs provided, function retrieves metadata DOI individually. allows precise tracking DOIs successfully retrieved. using DOI mode, small delay (0.1 seconds) added requests avoid overwhelming CrossRef API. large DOI lists, function displays progress messages every 10 DOIs.","code":""},{"path":[]},{"path":"https://lucy-dwr.github.io/pubclassify/reference/get_pubs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve publication metadata from CrossRef — get_pubs","text":"","code":"if (FALSE) { # \\dontrun{ # search for publications by keyword climate_pubs <- get_pubs(query = \"climate change\", total = 500)  # search with filters recent_ecology <- get_pubs(   filter = c(     from_pub_date = \"2022-01-01\",     container_title = \"ecology\"   ),   total = 100 )  # retrieve specific publications by DOI my_dois <- c(   \"10.1038/s41586-019-1401-2\",   \"10.1126/science.aaf7671\",   \"10.1111/invalid-doi\"  # this DOI doesn't exist ) my_pubs <- get_pubs(dois = my_dois)  # check which DOIs were not successfully retrieved my_pubs[my_pubs$doi_retrieved == FALSE, ]  # get only successfully retrieved DOIs found_pubs <- get_pubs(dois = my_dois, preserve_404 = FALSE) } # }"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/search_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for Pattern Across All Columns in a Data Frame — search_cols","title":"Search for Pattern Across All Columns in a Data Frame — search_cols","text":"Searches pattern within columns data frame identifies columns row contain matches. function handles complex data structures like nested data frames lists, recursively searching within .","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/search_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for Pattern Across All Columns in a Data Frame — search_cols","text":"","code":"search_cols(df, pattern, ignore_case = TRUE)"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/search_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for Pattern Across All Columns in a Data Frame — search_cols","text":"df data frame search within. pattern character string search . pattern treated fixed string (regular expression). ignore_case Logical indicating whether perform case-insensitive search. Default TRUE.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/search_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for Pattern Across All Columns in a Data Frame — search_cols","text":"original data frame additional list-column named matching_cols. element matching_cols character vector containing names columns pattern found row.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/search_cols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for Pattern Across All Columns in a Data Frame — search_cols","text":"function performs search using fixed pattern matching (regular expressions). default, case-insensitive can controlled ignore_case parameter. recursively searches : Atomic vectors (converting character comparison) Nested lists (searching element recursively) Nested data frames (searching values character strings) function especially useful : Finding columns contain specific text complex data structures Filtering rows based pattern presence across column Identifying specific terms appear publication metadata","code":""},{"path":[]},{"path":"https://lucy-dwr.github.io/pubclassify/reference/search_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for Pattern Across All Columns in a Data Frame — search_cols","text":"","code":"# do a simple data frame search (case-insensitive by default) df <- data.frame(   title = c(\"Climate Change Study\", \"Economic Analysis\", \"CLIMATE Policy\"),   abstract = c(\"Effects of warming on ecosystems\", \"Market trends\", \"Environmental regulations\"),   stringsAsFactors = FALSE ) result <- search_cols(df, \"climate\")  # both \"Climate Change Study\" and \"CLIMATE Policy\" will match result$matching_cols #> [[1]] #> [1] \"title\" #>  #> [[2]] #> character(0) #>  #> [[3]] #> [1] \"title\" #>   # do a case-sensitive search (will only match exact case) result_sensitive <- search_cols(df, \"Climate\", ignore_case = FALSE) result_sensitive$matching_cols #> [[1]] #> [1] \"title\" #>  #> [[2]] #> character(0) #>  #> [[3]] #> character(0) #>   # filter to show only rows where the pattern appears in any column result[lengths(result$matching_cols) > 0, ] #>                  title                         abstract matching_cols #> 1 Climate Change Study Effects of warming on ecosystems         title #> 3       CLIMATE Policy        Environmental regulations         title"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/validate_bibtex_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate BibTeX data structure — validate_bibtex_data","title":"Validate BibTeX data structure — validate_bibtex_data","text":"Validates BibTeX data structure contains required fields.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/validate_bibtex_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate BibTeX data structure — validate_bibtex_data","text":"","code":"validate_bibtex_data(   bibtex_data,   required_fields = c(\"author\", \"title\", \"year\") )"},{"path":"https://lucy-dwr.github.io/pubclassify/reference/validate_bibtex_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate BibTeX data structure — validate_bibtex_data","text":"bibtex_data list containing BibTeX fields. required_fields Character vector field names must present. Default c(\"author\", \"title\", \"year\").","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/validate_bibtex_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate BibTeX data structure — validate_bibtex_data","text":"Logical indicating whether BibTeX data valid.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/validate_bibtex_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate BibTeX data structure — validate_bibtex_data","text":"function performs several checks provided BibTeX data: Verifies bibtex_data NULL Confirms bibtex_data list least one element Checks required fields present list check fails, function returns FALSE, otherwise returns TRUE.","code":""},{"path":"https://lucy-dwr.github.io/pubclassify/reference/validate_bibtex_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate BibTeX data structure — validate_bibtex_data","text":"","code":"if (FALSE) { # \\dontrun{ # check valid BibTeX data valid_data <- list(   author = \"Smith, John\",   title = \"Example Paper\",   year = \"2023\",   journal = \"Journal of Examples\" ) validate_bibtex_data(valid_data)  # check invalid BibTeX data (missing year) invalid_data <- list(   author = \"Smith, John\",   title = \"Example Paper\" ) validate_bibtex_data(invalid_data) } # }"}]

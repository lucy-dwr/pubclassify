% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_bibtex.R
\name{extract_year_vectorized}
\alias{extract_year_vectorized}
\title{Extract publication year from various date fields}
\usage{
extract_year_vectorized(published_print, published_online, created)
}
\arguments{
\item{published_print}{Character vector of print publication dates (format:
"YYYY-MM-DD" or similar)}

\item{published_online}{Character vector of online publication dates (format:
"YYYY-MM-DD" or similar)}

\item{created}{Character vector of content creation dates (format: "YYYY-MM-DD"
or similar)}
}
\value{
A character vector containing the extracted years. For each element,
returns the year from the first available date field according to priority
order. If no valid date is found, returns NA_integer_.
}
\description{
Extracts the publication year from multiple possible date fields using a
vectorized approach. The function prioritizes dates in the following order:
print publication date, online publication date, and creation date.
}
\details{
The function applies the following logic to each element in the input vectors:
\enumerate{
\item Extract the first 4 characters (year) from each date field
\item Use the year from published_print if available
\item Otherwise, use the year from published_online if available
\item Otherwise, use the year from created if available
\item If none are available, return NA_integer_
}

This function is designed to work with publication metadata from sources like
CrossRef, where different types of dates may be available for different
publications.
}
\examples{
# extract year from different date combinations
extract_year_vectorized(
  published_print = c("2022-01-15", NA, NA, "2023-06-30"),
  published_online = c(NA, "2021-12-10", NA, "2023-05-15"),
  created = c(NA, NA, "2020-07-22", "2023-01-01")
)
# returns c("2022", "2021", "2020", "2023")

# handle missing values
extract_year_vectorized(
  published_print = c(NA, NA),
  published_online = c(NA, "2021-12-10"),
  created = c(NA, NA)
)
# returns c(NA_integer_, "2021")

}
